id: all_python
namespace: sanitychecks.plugin-scripts

inputs:
  - id: dataset_uri
    type: STRING
    displayName: Dataset URI
    defaults: https://huggingface.co/datasets/kestra/datasets/raw/main/csv/orders.csv

  - id: discount_amount
    type: FLOAT
    displayName: Discount Amount
    description: By default, it's set to 0 (no discount).
    min: 0
    max: 1
    defaults: 0.2

tasks:
  - id: python_script
    type: io.kestra.plugin.scripts.python.Script
    script: |
      print("Hello, World from a Docker Task Runner")

  - id: python_script_process
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    script: |
      print("Hello, World from a Process Task Runner")
  
  - id: python_commands
    type: io.kestra.plugin.scripts.python.Commands
    inputFiles:
      main.py: |
        print("Hello, World from the Commands Task")
    commands:
      - python main.py
  
  - id: python_commands_process
    type: io.kestra.plugin.scripts.python.Commands
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    inputFiles:
      main.py: |
        print("Hello, World from the Commands Task and Process Task Runner")
    commands:
      - python main.py

  - id: python_script_logs
    type: io.kestra.plugin.scripts.python.Script
    allowFailure: true
    allowWarning: true
    beforeCommands:
      - pip install kestra
    script: |
      import time
      from kestra import Kestra

      logger = Kestra.logger()

      logger.debug("DEBUG is used for diagnostic info.")
      time.sleep(0.5)

      logger.info("INFO confirms normal operation.")
      time.sleep(0.5)

      logger.warning("WARNING signals something unexpected.")
      time.sleep(0.5)

      logger.error("ERROR indicates a serious issue.")
      time.sleep(0.5)

      logger.critical("CRITICAL means a severe failure.")

  - id: python_script_metrics
    type: io.kestra.plugin.scripts.python.Script
    beforeCommands:
      - pip install kestra
    script: |
      from kestra import Kestra
      import requests
      import time

      start = time.perf_counter()
      requests.get("{{ inputs.dataset_uri }}")
      end = time.perf_counter()

      Kestra.timer('duration', end - start)

  - id: python_script_outputs
    type: io.kestra.plugin.scripts.python.Script
    containerImage: ghcr.io/kestra-io/pydata:latest
    beforeCommands:
      - pip install kestra
    outputFiles:
      - processed_orders.csv
    script: |
      import pandas as pd
      from kestra import Kestra

      df = pd.read_csv('{{ inputs.dataset_uri }}')
      total_revenue = df['total'].sum()
      Kestra.outputs({"total": total_revenue})
      if {{ inputs.discount_amount }} > 0:
        df['discounted_total'] = df['total'] * (1 - {{ inputs.discount_amount }})
        df.to_csv('processed_orders.csv')

  - id: python_commands_etl_outputs
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: ghcr.io/kestra-io/pydata:latest
    beforeCommands:
      - pip install kestra
    inputFiles:
      main.py: |
        import pandas as pd
        from kestra import Kestra
        import os

        df = pd.read_csv(os.environ['DATASET_URI'])
        total_revenue = df['total'].sum()
        Kestra.outputs({"total": total_revenue})
        if float(os.environ['DISCOUNT_AMOUNT']) > 0:
          df['discounted_total'] = df['total'] * (1 - float(os.environ['DISCOUNT_AMOUNT']))
          df.to_csv('processed_orders.csv')
    outputFiles:
      - processed_orders.csv
    env:
      DATASET_URI: "{{ inputs.dataset_uri }}"
      DISCOUNT_AMOUNT: "{{ inputs.discount_amount }}"
    commands:
      - python main.py

  - id: assert
    type: io.kestra.plugin.core.execution.Assert
    conditions:
    - "{{ outputs.python_script.exitCode == 0 }}"
    - "{{ outputs.python_script_process.exitCode == 0 }}"
    - "{{ outputs.python_commands.exitCode == 0 }}"
    - "{{ outputs.python_script_process.exitCode == 0 }}"
    - "{{ outputs.python_script_logs.exitCode == 0 }}"
    - "{{ outputs.python_script_metrics.exitCode == 0 }}"
    - "{{ outputs.python_commands_etl_outputs.outputFiles != '' }}"
